// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// tmpl/authenticate.html
// tmpl/consent.html
// tmpl/error.html
// tmpl/me.html
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x4f\x4f\x02\x31\x10\xc5\xef\xfd\x14\x2f\x9c\x76\xa3\x24\x46\x8f\x9c\x4a\x3b\xe0\xc6\xda\x62\x69\x8d\x9c\x48\xc3\x36\xa6\x09\xff\xb2\xbb\xca\xd7\x37\x5d\x24\xa2\x06\xe6\xd6\xe9\xbc\xce\xfb\xbd\x0e\x87\xb8\xd9\xa4\xf7\x26\x74\x11\x7e\xcf\x98\xb0\xc4\x1d\xc1\xf1\xb1\x22\x7c\xb4\xb1\x69\x51\x30\x20\xd5\xc8\xe5\x7d\x25\xf1\xbf\xb4\x71\xd0\x5e\x29\xcc\x6c\xf5\xcc\xed\x02\x4f\xb4\xb8\x65\xc0\x36\x6c\x22\x00\x47\x6f\xee\x8a\x2a\x4f\xc6\x4d\x48\x6b\x40\x3c\x72\xcb\x85\x23\x8b\x57\x6e\x17\x95\x9e\x16\x0f\xf7\x77\xe5\xaf\xc9\xb0\xea\xd2\x67\xc4\xd8\x18\x75\xcd\x89\xa4\x09\xf7\xca\xc1\x59\x4f\x59\xe6\x75\xf5\xe2\x09\x45\xbf\xa8\x64\xe5\xe8\x0f\xea\x7a\xb7\x0a\xeb\x65\xaa\xe3\xb6\x4b\x5d\x8a\x47\xea\xcc\xbf\xcc\xe8\x3d\xf7\x25\xca\x89\xb1\x54\x4d\x75\x3e\xa2\x18\x7c\x6b\x06\x25\x2c\x4d\xc8\x92\x16\x34\x3f\x05\x99\xea\x12\x46\x43\x92\x22\x47\x10\x7c\x2e\xb8\xa4\xdc\xf1\x33\xc9\x7f\x3a\xf9\xd1\x7d\x68\xdb\xc3\xae\xa9\x8f\xe1\x9d\x56\xf7\xbe\xcf\xbf\x4c\xee\x0e\x5b\xc6\xa4\x35\xb3\x0b\x1c\xa3\xf3\xcb\xde\xc6\xe8\x2b\x00\x00\xff\xff\xba\xb3\xab\xb4\xf3\x01\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 499, mode: os.FileMode(420), modTime: time.Unix(1494467608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAuthenticateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\xff\x6e\xdb\x38\xf2\xff\x3f\x4f\x31\xcb\x66\x11\x7b\x11\x4b\x72\xdc\x74\x0b\xc5\x4e\xbf\xfd\xb6\x1b\xdc\x1d\x0e\xdb\x62\x93\x3b\xdc\x62\xb1\x7f\xd0\xd2\x48\x62\x43\x93\x5a\x92\x4a\xec\xe6\x0c\xf4\x41\x6e\x5f\xae\x4f\x72\x20\x25\xd9\x96\x2c\xb9\xe9\x8f\x93\x5a\x3b\xe2\x8f\x99\xe1\x67\x3e\x33\x1c\xca\xd3\xef\x5e\xbf\x79\x75\xf3\xeb\xdb\x9f\x20\x33\x0b\x7e\x79\x34\xb5\x5f\xc0\xa9\x48\x67\x04\x05\xb1\x0d\x48\xe3\xcb\x23\x00\x80\xe9\x02\x0d\x85\x28\xa3\x4a\xa3\x99\x91\x7f\xdc\x5c\x8d\x9e\x93\xdd\x2e\x41\x17\x38\xfb\xf8\xe1\x3f\xa9\x54\x8c\x73\xea\x45\x5a\x25\xde\x8d\xbc\x45\xf1\xf1\xc3\x9f\x10\x49\x61\x50\x18\x3b\xe0\xe1\xc1\xf5\xb9\xae\xf5\xfa\xe3\x87\x3f\x2b\x29\x86\x19\x8e\x97\x7f\x97\x29\x30\x01\xff\x86\x6b\x53\xc4\x4c\x16\x9a\xaf\xa6\x7e\xd9\x55\x0e\xd3\x66\x55\xff\x6d\xaf\xff\x63\x8b\x5c\x2a\x03\x85\xe2\x83\xcc\x98\x5c\x87\xbe\x9f\x48\x61\xb4\x97\x4a\x99\x72\xa4\x39\xd3\x5e\x24\x17\x7e\xa4\xf5\x8b\x84\x2e\x18\x5f\xcd\x7e\x91\x73\x69\x64\x38\x09\x82\xe1\xc5\xd1\x46\x92\xc7\x65\xca\xc4\x28\xa7\x29\xc2\xc3\xa6\xd5\x5e\xf7\x2c\x36\x59\x08\x93\x67\x41\xbe\xbc\x68\xf4\xe4\x34\x8e\x99\x48\x43\x78\xfe\x3d\x04\x10\x34\x3b\x17\x54\xa5\x4c\x84\x40\x0b\x23\xb7\x3d\xeb\x1d\x8d\x89\x54\x8b\x96\xae\x5c\x6a\x66\x98\x14\x21\x28\xe4\xd4\xb0\x3b\x6c\x0a\x7d\x3f\x62\x22\xc6\x65\x08\xe3\x66\xfb\x9c\x46\xb7\xa9\x92\x85\x88\x43\x78\x72\xe5\xae\xb6\x35\xcb\x51\xff\x42\x6a\x5b\x03\x67\x2d\x8c\x83\xfe\xa5\x3e\x3d\x6f\x77\x19\x5c\x9a\x11\xe5\x2c\x15\x21\x44\x28\x0c\xaa\x96\x6d\x72\x39\xd2\x19\x8d\xe5\xbd\x55\x10\xc0\x59\x90\x2f\x21\x00\x95\xce\xe9\x20\x38\x85\xea\x9f\x77\x36\x3c\x85\x00\xce\xf3\xa5\xfb\xdf\xd1\xff\x74\xd8\x09\xa3\x43\xd1\x43\xa5\xa4\x6a\x81\x19\x49\x2e\x55\x08\x4f\x92\x24\x08\x82\x00\xbe\x2b\xb9\x42\x85\x39\xe0\x0e\x26\xf2\xc2\xb4\xe4\x58\x42\x8d\x4a\xf2\x84\x40\x4a\xfa\x90\x53\xd0\x54\xe8\x91\x46\xc5\x92\xe6\x7a\x65\x61\x38\x13\x18\xb6\x09\xd1\xf0\x51\x72\x66\xef\x8b\x2e\xa2\x8d\x83\xe0\xfb\x36\x82\x2a\x46\xb5\x27\x70\xeb\xb5\x00\xc6\x7b\x6e\xd9\x78\x6c\xbf\xcb\x79\x84\xbd\x77\xbd\xa5\xec\xd1\x5c\xb6\xc6\xb8\x45\x6b\xf6\x1e\x43\x18\x3f\xdd\x15\xb0\x07\xd9\xbc\x30\x46\x8a\xaf\xc3\xcc\x71\xc8\x28\x2a\xb4\x15\x19\x42\x91\xe7\xa8\x22\xaa\xf1\x0b\xa0\x7d\xfa\xea\xe5\xd5\x79\xf0\x75\xd0\x1e\x00\xaf\x66\x55\x57\x94\xf5\x82\x66\xaf\xd1\x3d\xce\x6f\x59\xb5\xcc\x2a\xca\x29\xe7\x10\x78\x13\xc0\xbd\xa5\x3e\x6e\x54\x54\x28\x6d\xad\xc9\x25\x6b\x06\x5e\x8f\x97\xc2\x4c\xde\xa1\x3a\x6d\xb6\xd1\xc8\x26\x9a\x56\x63\x22\xa3\x42\xb7\x9c\xda\x84\x79\xf2\x32\x78\xfa\xe3\x01\x8d\xde\x02\xb5\xde\x4f\xa7\x35\x6b\xc7\x65\x98\x07\xdd\xe8\xce\x27\xf6\xee\x47\xf7\xec\x20\x25\x37\xaa\x69\x4f\x4a\xe8\xe2\x88\xe3\x60\x8c\x91\x54\xb4\x84\x5d\x48\x81\x87\x94\x28\x4c\x99\x36\xa8\x46\x1d\x89\x3c\x66\x3a\xe7\x74\x75\x48\x88\xdd\x14\x29\x13\xd8\x4e\x5b\x5f\xba\x07\xec\xa6\xf8\xfd\x04\xde\x4c\xf1\x9f\xb0\x28\x9c\x63\x22\x95\xa5\xc4\xb6\x89\x26\x66\xcf\xd4\x6a\x5f\x0f\x81\x90\x8b\xee\xe5\xcf\xb9\x8c\x6e\x5b\x2e\xe6\x48\x95\x4d\x3c\x26\xfb\x14\x30\x1e\x13\x89\xec\xe1\xcf\xb9\xdd\x46\x9a\x6b\x81\x4f\xec\x46\x87\x94\x64\xe3\x1e\x3d\x9f\xc8\xae\x41\x2f\x47\x27\xcf\xda\x93\x5c\xe7\x3d\xb2\x34\x33\xce\x47\xdd\xd4\x1f\x53\x7b\x3f\xce\x6a\x9d\xd3\x76\xe6\xdd\x50\x3c\xb6\xf7\x17\x44\x50\xa7\x8e\xbe\x40\x0a\xdc\xf5\xc5\x81\xd4\xa9\xcb\x4b\xfa\xb4\xfd\x74\x35\xf9\xff\xc9\xcb\x4e\x51\x73\x19\xaf\x0e\xa5\xab\x1f\x9f\xcd\x9f\x9f\x9f\x5d\x80\xff\x03\x24\x94\x73\xdb\x67\x4b\x07\x90\x3c\x86\xb9\x92\xf7\x1a\x95\x86\x1f\xfc\x5e\x01\x75\xf6\xb6\xfb\x0f\x55\xa3\x54\xd1\x98\xa1\x30\x03\x65\xbd\x79\x5a\xcb\x3f\x85\x27\xcf\x5f\xbf\x3a\x7b\x76\x35\xec\xdf\xa0\x46\x0b\xf9\xfe\x5b\x88\x91\xdf\x40\x48\x5b\x82\x91\xc0\x31\xf9\xb4\x8c\xcf\x2d\x89\xee\x50\x25\xdc\x16\x80\x19\x8b\x63\x14\xdd\x1b\x63\xc9\xce\x85\x94\x26\x73\xa1\x45\x85\x61\x94\x33\xaa\xb1\x45\x63\x87\xa0\xd4\xcb\xbd\x19\xa9\xa2\x2b\x1d\x51\xde\x60\x9b\xfd\x9c\xfa\xd5\xc1\x61\xea\x97\x87\x9a\xa9\xe5\xcb\xe5\xd1\xd1\x34\x66\x77\xc0\xe2\x19\xa1\x79\x4e\x20\xe2\x54\xeb\x19\xd9\x1e\x05\xea\x33\x8e\x1d\x55\x75\xda\x64\x4f\xb6\x27\x90\xe9\x77\xa3\xd1\x34\x9b\x80\x4b\x39\x33\x62\xd1\x23\xd5\x31\x66\xea\x67\x93\xcb\xd1\x68\x67\x6c\x59\x62\xc6\x33\x52\x6f\x1d\x1b\x95\x8d\xbd\x84\x80\xdd\x92\xa5\x98\x11\xbf\xb0\xbc\x24\xb0\x40\x93\xc9\x78\x46\xde\xbe\xb9\xbe\xd9\x51\xee\x84\x66\xe3\xa6\xf2\x57\x0a\xa9\x41\xb0\x41\x1b\x45\xb2\x10\x66\xea\x67\xe3\xd6\x9c\xbc\x31\xa5\x36\xc2\x15\xd1\xe4\x72\xea\xe7\xad\xe1\x65\x55\xec\xce\x78\xc4\x7e\x12\x30\xab\x1c\x67\xc4\x46\x3a\x81\x9c\xd3\x08\x33\xc9\x63\x54\x55\xb7\x7f\x60\x7e\x4e\xb5\xbe\x97\x2a\xae\x65\x6c\x9f\x1b\x72\x36\xcd\x87\x64\xe1\x82\x32\x5e\x0b\xaa\x1e\x1a\x52\x5c\x1b\xd0\x38\x56\xa8\x75\x5b\xd4\xc3\x03\xb8\xb3\xe8\x15\x43\x1e\xc3\x7a\xdd\xd4\x53\x95\xb5\xa5\x6c\x5d\xcc\x17\xcc\x90\xcb\xc8\x61\x3b\xf5\xcb\xce\x3d\x50\x2b\x1c\xab\xea\x83\x5c\xbe\xe4\x0a\x69\xbc\x82\xda\xbb\x18\xbf\x80\x29\x85\x4c\x61\x32\x23\x4f\xc8\xe5\x35\x4b\x05\xfc\x55\x4c\x7d\xda\x04\x7d\xea\x5b\x1a\x74\x11\x47\xb3\x54\x30\xd1\x62\x6a\x8b\x33\xae\xf1\x45\x94\x51\xce\x51\xa4\x38\x73\xeb\xac\x9f\x60\xbd\xfe\x3c\x3a\x39\x1b\x1d\x99\xbf\x21\x89\x1e\xe7\xb8\xff\x25\x8f\xbe\xc0\xf9\x0e\xd7\x47\xfb\xfe\x67\x69\x7a\xfd\xde\x11\xa2\x07\x18\x30\xf5\x63\x76\x67\x53\x97\xfb\x3a\x9a\xea\x48\xb1\xdc\x80\x56\xd1\x8c\xd4\x2f\x3d\xe8\x3b\xba\x6c\xbf\xf3\xb0\x6d\x3e\x67\x73\xed\xbf\xfb\xa3\x40\xb5\xf2\x27\xde\x99\x37\xae\x1e\xbc\x05\x13\xde\x3b\x6d\x1d\x55\xca\xdb\x4a\x2e\xb5\x1e\x0f\x62\x19\x15\x0b\x14\x66\xe8\x39\x16\x0f\x92\x42\x38\x8a\xc1\x60\x08\x0f\xdb\x9d\xf7\x78\x70\xb2\xad\xb7\x4f\x86\x5e\xc4\x59\x74\xdb\x1a\xbc\x8b\xd5\xf1\xe0\xc4\xae\xed\x64\xe8\x51\xc1\x16\xd4\xe0\xe0\x21\xab\x6a\x22\x62\x64\x9a\x72\x24\xa7\x20\x73\x1a\x31\xb3\xda\x36\xad\x4f\x81\x68\x2e\xef\xc9\x70\x9b\xda\x77\xdf\xdf\xdc\x51\xb5\x81\x1b\x66\x70\x3c\x20\x4f\x36\x49\x76\x3b\xa5\x6e\x6a\x18\xe4\x95\x0e\xde\x31\x19\xef\xec\xb2\x5b\x76\xdb\xcb\x75\x78\xb9\x72\xdf\xaf\x31\xa1\x05\x37\x83\xe1\xde\xb0\x63\xcf\x62\x3f\xd8\x9f\x6f\xaf\x32\xf8\x42\x38\xb1\xd1\x77\x72\xda\x39\xa6\x50\x3c\x84\x13\xdf\x46\x7b\x91\xf7\x8c\xc9\x95\x8c\x50\xeb\xd7\xd4\xd0\xd0\xd6\x34\x1a\xbb\xc7\x55\x45\xfa\xcd\x2a\xc7\x83\xe3\x62\x27\x48\xe0\x3d\x5c\x49\xb5\xb0\x62\x07\x35\x5c\xbf\x05\xbf\x0f\x4f\x8f\x7c\xff\x91\xd3\x1e\x7a\x86\xda\xcb\x06\x6f\xb8\xf1\x83\x97\x30\x11\x0f\x88\x8b\xeb\xdf\x5c\x5c\x9f\xd8\xcf\x93\xdf\xc9\xd0\xbb\xa3\x7c\xd0\xab\xd5\x01\x50\x85\xf6\x41\x71\xf5\x20\x2b\xf2\x90\x30\x97\x70\x0e\x4a\x72\x23\x0e\x89\x59\x0f\xbb\x81\xb5\x15\x07\x2a\x1d\x76\xf0\xa9\xbe\xc8\xbf\x46\xaf\xae\x7f\xb9\x1a\xb9\xd7\xa2\x24\xb4\xf4\x5d\xa0\xa1\x95\xe6\xfd\x97\xaa\x0e\x20\x6a\x8c\x1a\x90\xca\xbd\x64\x9f\x85\xb0\x29\x7f\x9a\x56\x7a\xb1\x14\xb8\xc3\x76\x85\x3a\x97\x42\x63\x17\xe1\x61\x27\x68\x2a\x4c\xca\x77\x6d\x95\x83\x48\x8f\x5e\x1b\x7f\xd5\x5e\x35\x3c\x84\xa5\x13\xf2\x18\xd0\x4b\x3a\xf4\x29\xfb\x46\x19\x65\x07\xa3\x84\x32\xbe\x83\xd1\x32\x53\xa7\xa0\x0d\x35\x85\xee\x83\xa9\xcc\x40\x25\x94\x36\x03\x79\x39\x55\x1a\xff\x76\xfd\xe6\x67\x3b\xdb\xab\xbb\x6e\x70\x69\xba\x97\x11\x49\xa1\x25\x47\x8f\xcb\x74\xeb\x93\xcf\xf2\x88\xad\xc7\x36\x53\xcb\xd6\xae\xc5\x1d\x35\x1f\x2f\x8e\x76\x08\x7d\x3c\x70\x15\x6e\x05\x7f\xad\xa8\xf6\x00\x8b\x1d\xba\xad\x00\xf0\x7d\xb8\xce\x31\x62\xc9\x0a\xaa\x31\x16\x33\x55\x70\xd4\xad\x91\xae\xcd\x06\xc2\x7e\x04\xf9\x3e\xdc\x64\x08\xb7\xb8\x72\x39\x02\xec\xf6\x9b\xa1\x3b\x8e\x80\x66\x31\x02\xd3\xae\xc1\x75\x5a\xea\xb3\x79\x61\xb0\x5b\x90\x4c\xec\xde\x5a\x56\x0b\x89\xdd\xe0\x3d\xf8\x67\xcb\x30\xa0\x0a\x21\xc6\x84\x09\x8c\x7b\x84\x94\x06\xb8\x43\x95\xb3\xa0\x63\x58\x99\xcd\x88\xc2\x3f\x0a\xa6\x30\x26\x5d\xa9\xa1\xca\x2c\x7d\x49\xb1\x9e\x1b\x82\x51\x05\xf6\xe5\x96\x1d\x88\x4d\x46\x4d\x29\x14\x74\x26\x0b\x7b\x7e\xc5\x1a\xf7\xce\xb5\x54\xf3\xe7\x2b\xb7\x9e\x79\xc1\xb8\x19\x31\x01\x75\xdd\x65\xe1\xe8\x99\x55\x99\x6e\x0d\xeb\x18\xb1\xee\x32\x76\x9b\x94\xbf\x6e\xc1\x0b\x26\x6c\xbd\x6a\xb2\x10\xce\xbb\x74\xb7\xda\xf6\x6c\xe9\xe6\x64\xf9\x33\x41\x55\xad\xb4\xc9\x59\x37\x77\x9b\x5e\xb9\xfa\x2d\x47\xaa\x11\xdc\x9b\x25\x58\xc9\x42\xb9\x0e\xaf\xd3\xf3\x9f\x83\x45\x2d\x38\x57\xf2\xce\xb2\x9d\x6e\x66\x77\xcb\x6e\x61\x44\x7e\xb5\xa6\xd4\x53\x60\x51\x68\x63\x69\x41\x0d\x58\xb1\x06\xce\xdd\x8f\x77\x34\x32\xa8\x34\x70\x29\x52\x8f\x3c\xd6\xa3\x15\x09\x9a\x2b\xa7\x25\xaa\xd0\x38\x60\xed\xc9\xdc\x93\x57\x56\x5a\x7f\xa1\x22\xe6\xa8\x42\xd8\xe6\x57\x9b\x73\x86\x9d\x30\x1d\x97\x7d\xae\xa2\xba\x2e\x0b\xb5\xe1\x45\x5b\xcf\xce\xf3\xba\x7a\x55\xb1\x1e\x1e\xed\x96\xb6\x7e\x79\xe0\x9f\xfa\xee\xc7\xce\xff\x06\x00\x00\xff\xff\xd5\xa9\xb0\xb4\xfc\x1c\x00\x00")

func tmplAuthenticateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplAuthenticateHtml,
		"tmpl/authenticate.html",
	)
}

func tmplAuthenticateHtml() (*asset, error) {
	bytes, err := tmplAuthenticateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/authenticate.html", size: 7420, mode: os.FileMode(420), modTime: time.Unix(1494513038, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConsentHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\x41\x6f\xa3\x30\x10\x85\xef\xfc\x8a\x59\x9f\x76\x0f\x8b\xaf\x55\x64\xa8\xa2\xb4\xb9\x26\x6a\xe8\xa1\x47\x63\x26\x60\xd5\xd8\xd4\x1e\xda\x46\x96\xff\x7b\x45\x80\x28\xe5\x32\xd8\x6f\xe6\x7b\xb6\x9f\xf8\xf3\x74\xd8\x55\x6f\xc7\x67\xe8\xa8\x37\x65\x26\xa6\x02\x46\xda\xb6\x60\x68\xd9\xb4\x81\xb2\x29\x33\x00\x00\xd1\x23\x49\x50\x9d\xf4\x01\xa9\x60\xaf\xd5\xfe\xff\x03\x5b\x24\xd2\x64\xb0\x3c\x1a\x94\x01\xa1\xd5\x9f\x08\x17\x37\x7a\x50\xce\x06\xb4\x24\xf8\xac\x67\x82\xcf\x38\x51\xbb\xe6\x52\x66\x62\x98\xc7\xb7\x16\xe4\x30\x18\xad\x24\x69\x67\xe1\xaf\x6e\x36\x10\x63\xbe\x1d\x1b\x8d\x56\x61\x4a\xff\xc0\xe3\xc7\x88\x81\xb0\x59\x99\x40\x0e\xa4\x52\x18\x02\x78\x0c\x6e\xf4\x0a\x03\x38\x3b\xfb\xd6\xd8\x49\x73\xce\xa1\xea\xf0\x17\xf9\x4b\x5a\x0a\x57\xcb\x65\x94\xdc\x26\x13\x7c\x28\x33\x71\x76\xbe\x07\xa9\xa6\xb6\x82\xf1\xc5\xe4\x51\x75\xd2\x18\xb4\x2d\x16\x31\xe6\xbb\x75\x91\x12\x83\x1e\xa9\x73\x4d\xc1\x8e\x87\x53\xb5\xbe\xc2\x68\xe6\x9f\xe9\x8b\xd1\x4b\xdb\x22\xe4\x2f\xeb\xc9\x4f\xca\x0d\x18\x52\xba\xb5\x08\xa3\x4b\xa1\xed\x30\x12\xd0\x65\xc0\x82\xa9\x0e\xd5\x7b\xed\xbe\x19\x58\xd9\x63\xc1\x62\xcc\x53\x62\xe5\xb5\x08\x6e\xf4\x3d\x1d\x6d\xb3\xa0\x04\x5f\x7d\x63\xcc\x55\xf0\xe7\xbd\x46\x73\x13\xef\xf9\x61\xac\x7b\x4d\x53\xaa\x7c\xba\xee\x54\x97\x20\xf8\x35\xfe\x9f\x00\x00\x00\xff\xff\x23\xff\x5c\x28\x0e\x02\x00\x00")

func tmplConsentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsentHtml,
		"tmpl/consent.html",
	)
}

func tmplConsentHtml() (*asset, error) {
	bytes, err := tmplConsentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consent.html", size: 526, mode: os.FileMode(420), modTime: time.Unix(1494620543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8f\x41\x6b\x03\x21\x10\x85\xef\xfe\x8a\x17\xef\xa9\xd7\x52\x26\x5e\x9a\xf4\xda\x42\xb7\x94\x1e\x4d\x76\xa8\x82\x51\x51\x97\xb2\x2c\xfb\xdf\x8b\xeb\x92\x93\x32\xdf\xbc\xf7\x31\x74\x38\xbf\xbf\x0e\x3f\x1f\x17\xd8\x7a\xf7\x5a\x50\x7b\xe0\x4d\xf8\x3d\x49\x0e\xb2\x0d\xd8\x8c\x5a\x00\x00\xdd\xb9\x1a\xdc\xac\xc9\x85\xeb\x49\x7e\x0d\x6f\xc7\x67\xb9\xa3\xea\xaa\x67\x7d\xc9\x39\x66\x1c\xf1\x59\xa7\xd1\xc5\xa9\xf8\x99\x54\x27\x82\x54\x2f\xa2\x6b\x1c\x67\x2d\x28\xf5\xe0\xb7\x8d\x31\x95\x03\x06\xcb\x99\xf1\x67\x0a\x4c\x00\xb7\x9a\x17\x2c\x0b\x9e\xb6\x2f\xd6\xb5\x5b\xd4\x35\xf7\xd8\x03\x9d\xb9\xdc\xb2\x4b\xd5\xc5\xd0\xb6\x48\xa5\xa6\xda\x1d\x6a\xbb\xe9\x3f\x00\x00\xff\xff\xcb\x78\xe2\x5c\xe3\x00\x00\x00")

func tmplErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplErrorHtml,
		"tmpl/error.html",
	)
}

func tmplErrorHtml() (*asset, error) {
	bytes, err := tmplErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/error.html", size: 227, mode: os.FileMode(420), modTime: time.Unix(1494787652, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xce\x3f\xcb\x83\x30\x10\xc7\xf1\x3d\xaf\xe2\xf7\x64\x71\xf2\xc9\x5a\xca\x19\x28\xfd\xb3\x49\x0b\xb5\x43\xc7\x54\x83\x0a\x31\x11\x4d\x86\x20\xbe\xf7\x62\xe3\x74\x70\x5f\x3e\xc7\xd1\xdf\xe5\x7e\xae\xde\x8f\x2b\x3a\x3f\x18\xc9\x68\x1b\x30\xca\xb6\x05\xd7\x96\x6f\x0b\xad\x1a\xc9\x00\x80\x06\xed\x15\xea\x4e\x4d\xb3\xf6\x05\x7f\x55\xb7\xfc\xc0\xf7\xe4\x7b\x6f\xb4\x2c\x23\x4e\x75\xed\x82\xf5\xc8\xf1\xf4\xa1\xe9\x5d\x98\x4d\x24\x91\x32\x23\x91\xae\xd1\xc7\x35\x51\x32\x1a\x93\x2e\x95\x55\xad\x46\x74\x61\x82\x4a\xfe\x88\x6c\x59\xf0\x8f\x75\xcd\x18\x89\x71\xa3\xbb\x11\xbf\x47\xbf\x01\x00\x00\xff\xff\xd6\x12\xf4\x6e\xb8\x00\x00\x00")

func tmplMeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplMeHtml,
		"tmpl/me.html",
	)
}

func tmplMeHtml() (*asset, error) {
	bytes, err := tmplMeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/me.html", size: 184, mode: os.FileMode(420), modTime: time.Unix(1494801357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
	"tmpl/authenticate.html": tmplAuthenticateHtml,
	"tmpl/consent.html": tmplConsentHtml,
	"tmpl/error.html": tmplErrorHtml,
	"tmpl/me.html": tmplMeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"authenticate.html": &bintree{tmplAuthenticateHtml, map[string]*bintree{}},
		"consent.html": &bintree{tmplConsentHtml, map[string]*bintree{}},
		"error.html": &bintree{tmplErrorHtml, map[string]*bintree{}},
		"me.html": &bintree{tmplMeHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

