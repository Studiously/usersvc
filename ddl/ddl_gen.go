// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// tmpl/authenticate.html
// tmpl/consent.html
// tmpl/myaccount.html
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x51\x4f\x89\xa0\x12\x82\x63\x4e\x26\xde\xa2\x88\xe0\x44\x6e\x7c\xe8\xa9\xb2\x12\xab\x58\xca\x4f\xe5\x18\x0a\x6f\x8f\xdc\xa2\x52\x90\x50\x8f\x3b\x3b\xbb\xfb\xcd\x2e\x97\xb8\x19\xdc\xce\x9b\x60\xa1\xf7\x8c\xe5\x8a\x78\x43\x68\xf8\x63\x49\x78\x9b\xad\x9f\x91\x30\xc0\x75\xd0\xba\x10\x90\x55\x03\xa9\xcb\x12\xb5\x2a\x5e\xb8\xda\xe0\x99\x36\xb7\x0c\x18\xcd\x60\x11\xec\x47\x38\x3b\xa2\x6a\x07\xe3\x7a\xb4\xaf\xc6\x9b\x36\x58\x8f\x77\xe3\x3f\xdd\xb8\x4b\x1e\xee\xef\xd2\xb3\x91\xa5\xd9\x9f\xb3\xfd\xd4\x9a\x7e\xeb\x3a\x3b\x06\x17\x9c\x3d\x11\x44\x96\xed\x35\x8c\x55\xa5\xa8\x78\x92\xb1\x44\xb2\xf8\x1e\x59\xa4\x50\xb4\x22\x45\x32\xa7\xf5\x29\x53\xe2\xba\x14\x95\x84\xa0\x92\x1a\x42\xce\xd7\x39\x17\x14\x15\x5d\x0b\xfe\xa3\xc4\x9d\x7b\x33\xcf\x87\xc9\x77\xbf\xe3\x1d\xa9\x2f\x9f\x27\xa6\xc3\xc8\x98\x50\x55\xfd\x4f\x8a\xec\xb2\x79\xa4\xc8\xbe\x02\x00\x00\xff\xff\x0d\x97\xac\xd7\x7d\x01\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 381, mode: os.FileMode(420), modTime: time.Unix(1494284638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAuthenticateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x6d\x73\xda\xba\x12\xfe\xce\xaf\xd8\xaa\xed\x04\x3a\xf8\x05\x48\xd2\x8c\x63\xe8\xcd\x4d\x9b\x99\x3b\x73\xe7\xb6\x73\xdb\xf3\xe1\x7c\x14\xf6\xda\x56\x23\x4b\x3e\x92\x1c\x20\x39\xf9\xef\x67\x64\x43\xc0\x06\x93\x36\xad\xdd\x86\xa0\x95\x76\x57\xcf\xb3\x2f\x52\xc2\x57\x1f\x3f\x5f\x7f\xfb\xf3\xcb\x27\xc8\x4c\xce\x67\xbd\xd0\x7e\x00\xa7\x22\x9d\x12\x14\xc4\x0e\x20\x8d\x67\x3d\x00\x80\x30\x47\x43\x21\xca\xa8\xd2\x68\xa6\xe4\x8f\x6f\x37\xce\x05\x59\x8b\x0c\x33\x1c\x67\xff\x95\x29\x30\x01\x7f\xc3\x57\x53\xc6\x4c\x96\x9a\xaf\x42\xaf\x16\xd5\xd3\xb4\x59\x6d\x7e\xb7\xcf\xbf\x58\x5e\x48\x65\xa0\x54\xbc\x9f\x19\x53\xe8\xc0\xf3\x12\x29\x8c\x76\x53\x29\x53\x8e\xb4\x60\xda\x8d\x64\xee\x45\x5a\x7f\x48\x68\xce\xf8\x6a\xfa\x7f\x39\x97\x46\x06\x13\xdf\x1f\x5c\xf6\x9e\x34\xb9\x5c\xa6\x4c\x38\x05\x4d\x11\x1e\x9e\x46\xed\xb3\x60\xb1\xc9\x02\x98\x9c\xfb\xc5\xf2\xb2\x21\x29\x68\x1c\x33\x91\x06\x70\xf1\x16\x7c\xf0\x9b\xc2\x9c\xaa\x94\x89\x00\x68\x69\xe4\x56\xf2\xb8\x63\x31\x91\x2a\x6f\xd9\x2a\xa4\x66\x86\x49\x11\x80\x42\x4e\x0d\xbb\xc3\xa6\xd2\x7b\x87\x89\x18\x97\x01\x8c\x9a\xe3\x73\x1a\xdd\xa6\x4a\x96\x22\x0e\xe0\xf5\x4d\xf5\xb4\xbd\x59\x3a\xdd\x1b\xd9\xf8\xea\x57\xde\xc2\xc8\xef\xde\xea\xe9\x59\x5b\x64\x70\x69\x1c\xca\x59\x2a\x02\x88\x50\x18\x54\x2d\xdf\xe4\xd2\xd1\x19\x8d\xe5\xc2\x1a\xf0\x61\xec\x17\x4b\xf0\x41\xa5\x73\xda\xf7\x87\xb0\xfe\xe7\x8e\x07\x43\xf0\xe1\xac\x58\x56\xff\x0f\xc8\x4f\x07\x47\x60\x64\xa2\x28\x4d\x0b\x4c\x1b\x08\x4e\x4d\x7a\x00\xa4\xa6\x9d\x0c\x41\x53\xa1\x1d\x8d\x8a\x25\x4d\x3f\x65\x69\x38\x13\x18\xb4\x89\x6c\x60\x9b\x8c\xed\x7b\x79\x28\x40\x46\xbe\xff\xb6\xbd\x73\x15\xa3\xda\x53\xb8\x45\xdb\x87\xd1\x1e\x9c\x4f\x48\xef\x8b\x2a\x24\xd9\x7d\x25\xad\x75\x3b\x73\xd9\x9a\x53\x6d\x5a\xb3\x7b\x0c\x60\x74\xba\xab\x60\x0f\xb2\x79\x69\x8c\x14\xbf\x86\x59\xc5\xbd\x51\x54\x68\xab\x32\x80\xb2\x28\x50\x45\x54\xe3\x0b\xa0\x3d\xbd\xbe\xba\x39\xf3\x7f\x0d\xda\x23\xe0\x45\x92\x4b\xd5\x91\x1d\x9d\xa0\xd9\xc7\x59\xe0\xfc\x96\xad\xb7\xb9\xce\x4e\xca\x39\xf8\xee\x04\x70\x6f\xab\x3f\x36\x2b\x2a\x95\xb6\xde\x14\x92\x35\x13\xa6\x83\xa5\x20\x93\x77\xa8\x86\xcd\x31\x1a\xd9\x02\xd1\x1a\x4c\x64\x54\xea\x16\xa9\x4d\x98\x27\x57\xfe\xe9\xfb\x23\x16\xdd\x1c\xb5\xde\x2f\x83\x9b\xa8\x1d\xd5\xe9\xe9\x1f\x46\x77\x3e\xb1\x6f\x37\xba\xe3\xa3\x21\xf9\x64\x9a\xb6\x8c\x6f\xd4\x1f\x8a\x91\x2a\x06\x63\x8c\xa4\xa2\x35\xec\x42\x0a\x3c\x66\x44\x61\xca\xb4\x41\xe5\x1c\x28\xc0\x31\xd3\x05\xa7\xab\x63\x4a\x22\x29\x0c\x65\x02\xd5\x6f\xaa\xdd\xbb\xa5\x79\xbf\xf0\x36\x4b\xf3\x33\x1e\x05\x73\x4c\xa4\xb2\x21\xb1\x1d\xa2\x89\xd9\x73\xd5\x4a\x51\x98\x00\x08\xb9\x3c\xbc\xfd\x39\x97\xd1\x6d\x8b\x62\x8e\x54\xd9\xc2\x63\xb2\xe7\x80\x71\x99\x48\x64\x47\xfc\x9c\xd9\xf2\xdf\xdc\x0b\x3c\xd3\x45\x8e\x19\xc9\x46\x1d\x76\x9e\xa9\xae\x7e\x67\x8c\x4e\xce\xdb\x8b\x2a\xe1\x02\x59\x9a\x99\x8a\xa3\xc3\xa1\x3f\xa2\xf6\xfd\x31\xaf\x75\x41\xdb\x95\xf7\x29\xc4\x63\xfb\xbe\x20\x83\x0e\xda\xe8\x4a\x24\xbf\x7a\x5e\x9c\x48\x07\x6d\xb9\x49\x97\xb5\x4f\x37\x93\x7f\x4f\xae\x0e\xaa\x9a\xcb\x78\x75\xac\x5c\xbd\x3f\x9f\x5f\x9c\x8d\x2f\xc1\x7b\x07\x09\xe5\xdc\xca\x20\x91\x0a\x24\x8f\x61\xae\xe4\x42\xa3\xd2\xf0\xce\xeb\x54\xb0\xa9\xde\xb6\xff\x50\xe5\xa4\x8a\xc6\x0c\x85\xe9\x2b\xcb\xe6\x70\xa3\x7f\x08\xaf\x2f\x3e\x5e\x8f\xcf\x6f\x06\xdd\x0d\xca\xc9\xe5\xfd\xef\x50\x23\x7f\x83\x92\xb6\x06\x23\x81\x63\xf2\xbc\x8e\x9f\x3d\x12\xdd\xa1\x4a\xb8\x5c\x04\x19\x8b\x63\x14\x87\xfb\x62\x1d\x9c\xb9\x94\x26\xab\x32\x8b\x0a\xc3\x28\x67\x54\x63\x2b\x8a\x2b\x00\xa5\x5e\xee\xad\x48\x15\x5d\xe9\x88\xf2\x46\xb0\xd9\x9f\xa1\xb7\x3e\xef\x87\x5e\x7d\x8b\x08\x6d\xb8\xcc\x7a\xbd\x30\x66\x77\x10\x71\xaa\xf5\x94\x6c\x0f\xee\x9b\xbb\xc4\x8e\xd0\x96\x78\xb2\xbd\x2f\x84\xaf\x1c\x27\xcc\x26\x50\x15\x9a\x29\xb1\x98\x91\xf5\xa5\x23\xf4\xb2\xc9\xcc\x71\x76\xe6\x56\xed\x61\xad\xa7\xd1\x33\x08\xd8\xd6\x2b\xc5\x94\x78\x9a\xa5\xa2\x2c\x08\xe4\x68\x32\x19\x4f\xc9\x97\xcf\x5f\xbf\xed\xd8\xab\xf4\x64\xa3\xa6\xbd\x6b\x85\xd4\x20\xd8\xec\x8c\x22\x59\x0a\x13\x7a\xd9\xa8\xb5\xa6\x3e\xcf\x9a\x55\x81\x53\x62\xf3\x92\x40\xc1\x69\x84\x99\xe4\x31\xaa\x29\x11\x34\x47\xe2\x1d\x59\x53\x50\xad\x17\x52\xc5\xad\x75\x4f\xc3\xc7\xd6\x1e\xb0\x87\x39\x65\x1c\x68\x1c\x2b\xd4\x7a\x6f\x71\x7d\xf4\x98\x45\xd5\xbe\x42\x6f\xfd\xb5\x39\xa7\xd8\x20\xb9\x6e\xf1\x64\x76\xc5\x15\xd2\x78\x05\x1b\x68\x31\xfe\x00\x21\x85\x4c\x61\x32\x25\xaf\xc9\xec\x2b\x4b\x05\xfc\x47\x84\x1e\x9d\x85\x5e\xb1\xc3\x8b\x67\x39\xe8\xe0\xa9\x0e\x86\x16\x49\xd5\xe0\x87\x28\xa3\x9c\xa3\x48\x71\xfa\xf0\xe0\x3e\x3e\xfe\x1c\x67\x95\x33\x55\x90\x1c\x66\x8a\xc5\x6b\x90\xc8\x33\x20\x76\x20\x6f\xd7\x6f\x39\x7b\x19\x87\x6b\xdc\xab\xdd\xfe\x30\x0b\xff\x93\xa6\x93\x81\x03\x81\x7a\x84\x8b\xd0\x8b\xd9\x9d\x4d\xd5\xea\xa3\x17\xea\x48\xb1\xc2\x80\x56\xd1\x94\x6c\xee\xe6\xf4\x3b\x5d\xb6\xaf\xe6\x76\xcc\xe3\x6c\xae\xbd\xef\x7f\x95\xa8\x56\xde\xc4\x1d\xbb\xa3\xf5\x17\x37\x67\xc2\xfd\xae\xc9\x2c\xf4\x6a\x7d\xb3\x8d\xe2\xda\xe8\x9b\xfe\xc9\xf6\xd0\x78\x32\x70\x23\xce\xa2\xdb\x7e\x52\x8a\x8a\x7b\xe8\x0f\x76\x7a\xcb\x9b\xfe\x89\xf5\xf6\x64\xe0\x52\xc1\x72\x6a\xb0\xff\x90\xad\x9b\x3a\x31\x32\x4d\x39\x92\x21\xc8\x82\x46\xcc\xac\xb6\x43\x8f\x43\x20\x9a\xcb\x05\x59\x97\xd2\xc7\xc1\x65\x6f\xeb\x4c\x2f\xf4\xea\x92\x14\x7a\xd5\xdf\x3f\xfe\x09\x00\x00\xff\xff\x89\x32\xb4\x1e\x0f\x11\x00\x00")

func tmplAuthenticateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplAuthenticateHtml,
		"tmpl/authenticate.html",
	)
}

func tmplAuthenticateHtml() (*asset, error) {
	bytes, err := tmplAuthenticateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/authenticate.html", size: 4367, mode: os.FileMode(420), modTime: time.Unix(1493856502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConsentHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xc1\x52\xc3\x20\x10\x86\xef\x79\x8a\x95\x93\x1e\x0c\x57\xa7\x43\xe2\x74\xaa\x5e\xdb\xb1\xf1\xe0\x91\x90\x6d\xc2\x48\x20\x86\x8d\xda\x61\x78\x77\x87\x26\x71\x2c\x97\x1f\xd8\xdd\xef\x87\x5d\x71\xf3\xb4\xdf\x55\xef\x87\x67\xe8\xa8\x37\x65\x26\x92\x80\x91\xb6\x2d\x18\x5a\x96\x2e\x50\x36\x65\x06\x00\x20\x7a\x24\x09\xaa\x93\xa3\x47\x2a\xd8\x5b\xf5\x72\xff\xc0\x96\x10\x69\x32\x58\x1e\x0c\x4a\x8f\xd0\xea\x2f\x84\xb3\x9b\x46\x50\xce\x7a\xb4\x24\xf8\x1c\xcf\x04\x9f\x71\xa2\x76\xcd\xb9\xcc\xc4\x30\x97\x6f\x2d\xc8\x61\x30\x5a\x49\xd2\xce\xc2\xad\x6e\x36\x10\x42\xbe\x9d\x1a\x8d\x56\x61\x8c\x77\x30\xe2\xe7\x84\x9e\xb0\x59\x99\x40\x0e\xa4\x52\xe8\x3d\x8c\xe8\xdd\x34\x2a\xf4\xe0\xec\xec\x5b\x63\x27\xcd\x29\x87\xaa\xc3\x2b\xf2\xb7\xb4\xe4\xd7\x32\x72\x9b\x4c\xf0\xa1\xcc\xc4\xc9\x8d\x3d\x48\x95\x52\x0a\xc6\x17\x83\x47\xd5\x49\x63\xd0\xb6\x58\x84\x90\xef\xd6\x43\x8c\x0c\x7a\xa4\xce\x35\x05\x3b\xec\x8f\xd5\xda\x81\xc9\xcc\x9b\xb4\x42\x18\xa5\x6d\x11\xf2\xd7\xf5\xd5\x47\xe5\x06\xf4\x31\xfe\xa5\x08\xa3\x4b\xa1\xed\x30\x11\xd0\x79\xc0\x82\xa9\x0e\xd5\x47\xed\x7e\x18\x58\xd9\x63\xc1\x42\xc8\x63\x64\xe5\x45\x04\x37\xfa\x3f\x1d\x6d\xb3\xa0\x04\x5f\x7d\xaf\x60\x7e\xaa\x7b\x4d\x69\x7c\x3c\xfd\x2d\xe9\xd2\x71\x7e\x99\xf3\x6f\x00\x00\x00\xff\xff\x02\xcf\x3d\xac\xf7\x01\x00\x00")

func tmplConsentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsentHtml,
		"tmpl/consent.html",
	)
}

func tmplConsentHtml() (*asset, error) {
	bytes, err := tmplConsentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consent.html", size: 503, mode: os.FileMode(420), modTime: time.Unix(1493660032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMyaccountHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xbd\xce\x83\x30\x0c\x00\xf7\x3c\x85\xbf\xec\x9f\xb2\x76\x30\x59\xfa\xb3\x55\x65\xa0\x43\x47\x37\x58\x80\x14\x1c\x04\xa6\x12\x6f\x5f\xa5\xc9\x64\xc9\x77\x67\x19\xff\x2e\x8f\x73\xf7\x6a\xaf\x30\xea\x1c\xbd\xc1\x3c\x20\x92\x0c\x8d\x65\xb1\x79\xc1\xd4\x7b\x03\x00\x80\x33\x2b\x41\x18\x69\xdd\x58\x1b\xfb\xec\x6e\xff\x27\x5b\x91\x4e\x1a\xd9\xb7\x91\x69\x63\x18\xa6\x0f\xc3\x91\xf6\x15\x42\x92\x8d\x45\xd1\x15\x6e\xd0\x95\x73\xf8\x4e\xfd\xe1\x0d\x2e\x25\xbf\x93\xd0\x50\x13\x0a\x21\xed\xa2\x06\xdd\x92\xfd\x2a\xba\xdf\x7b\xdf\x00\x00\x00\xff\xff\x26\x36\xa3\x6f\xae\x00\x00\x00")

func tmplMyaccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplMyaccountHtml,
		"tmpl/myaccount.html",
	)
}

func tmplMyaccountHtml() (*asset, error) {
	bytes, err := tmplMyaccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/myaccount.html", size: 174, mode: os.FileMode(420), modTime: time.Unix(1493845923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
	"tmpl/authenticate.html": tmplAuthenticateHtml,
	"tmpl/consent.html": tmplConsentHtml,
	"tmpl/myaccount.html": tmplMyaccountHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"authenticate.html": &bintree{tmplAuthenticateHtml, map[string]*bintree{}},
		"consent.html": &bintree{tmplConsentHtml, map[string]*bintree{}},
		"myaccount.html": &bintree{tmplMyaccountHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

