// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// tmpl/authenticate.html
// tmpl/consent.html
// tmpl/myaccount.html
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\xcd\x4e\xc3\x30\x10\x84\xef\x7e\x8a\x51\x4f\x89\xa0\x12\x82\x63\x4e\x26\xde\xa2\x88\xe0\x44\x6e\x7c\xe8\xa9\xb2\x12\xab\x58\xca\x4f\xe5\x18\x0a\x6f\x8f\xdc\xa2\x52\x90\x50\x8f\x3b\x3b\xbb\xfb\xcd\x2e\x97\xb8\x19\xdc\xce\x9b\x60\xa1\xf7\x8c\xe5\x8a\x78\x43\x68\xf8\x63\x49\x78\x9b\xad\x9f\x91\x30\xc0\x75\xd0\xba\x10\x90\x55\x03\xa9\xcb\x12\xb5\x2a\x5e\xb8\xda\xe0\x99\x36\xb7\x0c\x18\xcd\x60\x11\xec\x47\x38\x3b\xa2\x6a\x07\xe3\x7a\xb4\xaf\xc6\x9b\x36\x58\x8f\x77\xe3\x3f\xdd\xb8\x4b\x1e\xee\xef\xd2\xb3\x91\xa5\xd9\x9f\xb3\xfd\xd4\x9a\x7e\xeb\x3a\x3b\x06\x17\x9c\x3d\x11\x44\x96\xed\x35\x8c\x55\xa5\xa8\x78\x92\xb1\x44\xb2\xf8\x1e\x59\xa4\x50\xb4\x22\x45\x32\xa7\xf5\x29\x53\xe2\xba\x14\x95\x84\xa0\x92\x1a\x42\xce\xd7\x39\x17\x14\x15\x5d\x0b\xfe\xa3\xc4\x9d\x7b\x33\xcf\x87\xc9\x77\xbf\xe3\x1d\xa9\x2f\x9f\x27\xa6\xc3\xc8\x98\x50\x55\xfd\x4f\x8a\xec\xb2\x79\xa4\xc8\xbe\x02\x00\x00\xff\xff\x0d\x97\xac\xd7\x7d\x01\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 381, mode: os.FileMode(420), modTime: time.Unix(1494284638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAuthenticateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x58\x5b\x73\xdb\xba\x11\x7e\xd7\xaf\xd8\xc3\xe4\x8c\xa8\x53\x89\xa4\x2c\x3b\x27\x43\x53\x4a\xd3\xe4\x78\xda\x4e\xe7\x24\xd3\xb8\x0f\x9d\x4e\x1f\x20\x72\x49\xc2\x01\x01\x16\x00\x75\x89\xeb\xff\xde\x01\xa8\x1b\x2f\x92\xd3\x24\x50\x22\x46\x58\xec\xb7\xc0\xb7\x17\x2e\x12\xfd\xf4\xfe\xc3\xbb\xfb\x7f\x7e\xfc\x0d\x72\x5d\xb0\xc5\x20\x32\x0f\x60\x84\x67\x73\x07\xb9\x63\x26\x90\x24\x8b\x01\x00\x40\x54\xa0\x26\x10\xe7\x44\x2a\xd4\x73\xe7\x1f\xf7\x77\x93\xd7\xce\x4e\xa4\xa9\x66\xb8\xf8\x9b\xc8\x80\x72\xf8\x2f\x7c\xd2\x55\x42\x45\xa5\xd8\x36\xf2\x6b\x51\xbd\x4c\xe9\xed\xfe\xdf\x66\xfc\x91\x16\xa5\x90\x1a\x2a\xc9\xdc\x5c\xeb\x52\x85\xbe\x9f\x0a\xae\x95\x97\x09\x91\x31\x24\x25\x55\x5e\x2c\x0a\x3f\x56\xea\x4d\x4a\x0a\xca\xb6\xf3\xbf\x8b\xa5\xd0\x22\x9c\x05\xc1\xe8\x76\x70\x40\xf2\x98\xc8\x28\x9f\x94\x24\x43\x78\x3c\xcc\x9a\xb1\xa6\x89\xce\x43\x98\xbd\x0a\xca\xcd\x6d\x43\x52\x92\x24\xa1\x3c\x0b\xe1\xf5\xcf\x10\x40\xd0\x14\x16\x44\x66\x94\x87\x40\x2a\x2d\x8e\x92\xa7\x13\x8b\xa9\x90\x45\xcb\x56\x29\x14\xd5\x54\xf0\x10\x24\x32\xa2\xe9\x0a\x9b\xa0\x5f\x26\x94\x27\xb8\x09\x61\xda\x9c\x5f\x92\xf8\x73\x26\x45\xc5\x93\x10\x5e\xdc\xd9\xd1\xde\xcd\x66\x72\xfe\x20\xfb\xbd\x06\x76\xb7\x30\x0d\xce\x1f\xf5\xfa\xa6\x2d\xd2\xb8\xd1\x13\xc2\x68\xc6\x43\x88\x91\x6b\x94\xad\xbd\x89\xcd\x44\xe5\x24\x11\x6b\x63\x20\x80\xab\xa0\xdc\x40\x00\x32\x5b\x12\x37\x18\xc3\xee\x8f\x77\x35\x1a\x43\x00\x37\xe5\xc6\xfe\xed\x91\x5f\x8f\x2e\xd0\x48\x79\x59\xe9\x16\x99\x26\x10\x26\xb5\xd3\x43\x70\x6a\xb7\x3b\x63\x50\x84\xab\x89\x42\x49\xd3\xe6\x3e\x45\xa5\x19\xe5\x18\xb6\x1d\xd9\xe0\x36\xbd\x32\x9f\xdb\xbe\x00\x99\x06\xc1\xcf\xed\x93\xcb\x04\x65\x07\xf0\xc8\x76\x00\xd3\x0e\x9d\x07\xa6\xbb\x22\xcb\x24\xfd\x62\xa5\x35\xf6\x64\x29\x5a\x6b\xec\xa1\x15\xfd\x82\x21\x4c\xaf\x4f\x01\x3a\x94\x2d\x2b\xad\x05\xff\x3e\xce\xac\xef\xb5\x24\x5c\x19\xc8\x10\xaa\xb2\x44\x19\x13\x85\xdf\x40\xed\xf5\xbb\xb7\x77\x37\xc1\xf7\x51\x7b\x81\xbc\x58\x30\x21\xcf\x64\xc7\x59\xd2\xcc\x98\xac\x71\xf9\x99\xee\x8e\xb9\xcb\x4e\xc2\x18\x04\xde\x0c\xb0\x73\xd4\xaf\x5b\x15\x57\x52\x99\xdd\x94\x82\x36\x13\xe6\x8c\x97\xc2\x5c\xac\x50\x8e\x9b\x73\x24\x36\x05\xa2\x35\x99\x8a\xb8\x52\x2d\xa7\x36\x69\x9e\xbd\x0d\xae\x7f\xbd\x60\xd1\x2b\x50\xa9\x6e\x19\xdc\x47\xed\xb4\x4e\xcf\xa0\x9f\xdd\xe5\xcc\x7c\xce\xb3\x7b\x75\x31\x24\x0f\xa6\x49\xcb\xf8\x1e\xbe\x2f\x46\x6c\x0c\x26\x18\x0b\x49\x6a\xda\xb9\xe0\x78\xc9\x88\xc4\x8c\x2a\x8d\x72\xd2\x53\x80\x13\xaa\x4a\x46\xb6\x97\x40\x62\xc1\x35\xa1\x1c\xe5\x0f\xaa\xdd\xa7\xa5\xb9\x5b\x78\x9b\xa5\xf9\x99\x1d\x85\x4b\x4c\x85\x34\x21\x71\x9c\x22\xa9\xee\x6c\xd5\x48\x91\xeb\x10\x1c\xe7\xb6\xff\xf8\x4b\x26\xe2\xcf\x2d\x17\x33\x24\xd2\x14\x1e\x9d\x3f\x47\x8c\x47\x79\x2a\xce\xc4\xcf\x8d\x29\xff\xcd\xb3\xc0\x33\x6f\x91\x4b\x46\xf2\xe9\x19\x3b\xcf\x54\xd7\xe0\x6c\x8c\xce\x5e\xb5\x95\xac\x70\x8d\x34\xcb\xb5\xf5\x51\x7f\xe8\x4f\x89\xf9\x7c\xdd\xae\x55\x49\xda\x95\xf7\x10\xe2\x89\xf9\x7c\x43\x06\xf5\xda\x38\x97\x48\x81\x1d\xdf\x9c\x48\xbd\xb6\xbc\xf4\x9c\xb5\xdf\xee\x66\x7f\x9a\xbd\xed\x85\x5a\x8a\x64\x7b\xa9\x5c\xfd\xfa\x6a\xf9\xfa\xe6\xea\x16\xfc\x5f\x20\x25\x8c\x19\x19\xa4\x42\x82\x60\x09\x2c\xa5\x58\x2b\x94\x0a\x7e\xf1\xcf\x02\xec\xab\xb7\x79\xff\x10\x39\xc9\x24\x49\x28\x72\xed\x4a\xe3\xcd\xf1\x1e\x7f\x0c\x2f\x5e\xbf\x7f\x77\xf5\xea\x6e\x74\xfe\x05\x35\x29\xc4\x97\x1f\x01\x23\x7e\x00\x48\x1b\x41\x0b\x60\x98\x3e\x8f\xf1\xff\xb6\x44\x2b\x94\x29\x33\x8d\x5b\x4e\x93\x04\x79\xff\x8b\xb1\x8e\xce\x42\x08\x9d\xdb\xd4\x22\x5c\x53\xc2\x28\x51\xd8\x0a\x63\xcb\xa0\x50\x9b\x8e\x46\x26\xc9\x56\xc5\x84\x35\xa2\xcd\x7c\x47\xfe\xae\xe1\x8f\xfc\xfa\x1a\x11\x99\x78\x59\x0c\x06\x51\x42\x57\x40\x93\xb9\x43\xca\xd2\x81\x98\x11\xa5\xe6\xce\xb1\x85\xdf\xdf\x2a\xcc\xaa\x9d\xd0\x14\x7b\xe7\x78\x73\x88\x7e\x9a\x4c\xa2\x7c\x06\xb6\xe4\xcc\x1d\xc3\x9e\xb3\xbb\x7e\x44\x7e\x3e\x5b\x4c\x26\x27\x6b\xeb\x16\x33\x99\x3b\xfb\x57\xc7\xc1\x64\xe3\x5d\x72\x02\x6f\xd5\xf2\x69\x13\xfe\x9d\x44\xa2\x11\x4c\x5a\xc6\xb1\xa8\xb8\x8e\xfc\x7c\xda\xd2\xa9\x1b\x59\x4e\x0a\x9c\x3b\xe6\xdb\x01\xbd\x2d\x71\xee\x98\xe4\x74\xa0\x64\x24\xc6\x5c\xb0\x04\xe5\x4e\xec\x5f\xd0\x2f\x89\x52\x6b\x21\x93\x3d\xc6\xf1\x77\x03\xe7\x30\x7d\x09\x0b\x0b\x42\xd9\x85\xcd\x58\x39\x90\x24\x91\xa8\x54\x07\x69\xd7\x6b\xd6\xda\xaa\x5a\x16\x54\x3b\x8b\xd8\xd2\x11\xf9\xb5\xb0\xa5\x51\xee\x19\xde\xb5\x04\xce\xe2\x2d\x93\x48\x92\x2d\xec\x29\xc7\xe4\x0d\x44\x04\x72\x89\xe9\xdc\x79\xe1\x2c\x3e\xd1\x8c\xc3\x5f\x78\xe4\x93\x45\xe4\x97\x27\xde\xf3\x8d\x6f\xfa\xbc\xa9\x68\xc6\x29\x6f\x85\x8f\x75\x24\x98\xde\x4a\xf0\xb9\xe3\xdb\xc9\x37\x71\x4e\x18\x43\x9e\xe1\xfc\xf1\xd1\x7b\x7a\x72\xa0\x40\x9d\x8b\x64\xee\x7c\xfc\xf0\xe9\xfe\x39\xb7\xdb\x8d\xd9\xb0\xea\x77\xb6\xd9\xca\x57\xd1\x7b\xc6\x41\x46\xff\x7b\x5d\xdd\xeb\x20\x7b\xf6\xaf\xf6\xcf\xef\x42\x9f\xf5\x4d\x4f\xe4\x5f\xf0\x52\xe4\x27\x74\x65\x72\xde\x3e\x06\x91\x8a\x25\x2d\x35\x28\x19\xcf\x9d\xfd\x2d\x9f\x3c\x90\x4d\xfb\x92\x6f\xe6\x7c\x46\x97\xca\x7f\xf8\x4f\x85\x72\xeb\xcf\xbc\x2b\x6f\xba\xfb\xe1\x15\x94\x7b\x0f\xca\x59\x44\x7e\x8d\xb7\x18\xd8\x1a\xd0\x06\x0f\x7d\xbf\x20\x4c\x55\xa5\x97\x51\x9d\x57\x4b\x8b\xbc\x83\x30\x5b\x6c\x62\x98\x32\x11\xed\xf1\xcc\xde\x5f\xba\x89\x88\xab\x02\xb9\x1e\x79\x36\x5e\xdd\xb4\xe2\x36\x98\xc0\x1d\xc1\xe3\xf1\xc5\xf7\xd2\x1d\x1e\xdb\xdd\xe1\xc8\x8b\x19\x8d\x3f\xb7\x16\x9f\x32\xfe\xd2\x1d\x1a\xf3\xc3\x91\x47\x38\x2d\x88\x46\xf7\x31\xdf\xb5\x24\x8e\x16\x59\xc6\xd0\x19\x83\x28\x49\x4c\xf5\xf6\x38\xf5\x34\x06\x47\x31\xb1\x76\x4e\x2f\xcf\xa3\xdb\xc1\xc0\xf7\x4f\x80\x5f\xec\xfd\x36\x1c\x9d\x08\xcc\xf0\x0c\xa7\x77\x42\x16\xee\x63\x4b\x62\x46\x25\x59\x08\x43\xdf\xe4\x51\x55\x0e\xc7\x3d\x2b\x4c\x40\x85\x50\xa7\x49\x9f\x3c\x21\x9a\xdc\xdb\x35\xc3\x07\x25\x78\x2f\x86\xaa\xe2\x18\x95\x0a\xe1\x48\x8e\x44\x55\x0a\xae\xd0\x90\xd4\x55\x30\x83\x30\x94\xda\x75\xee\x73\x04\x85\x72\x85\x12\x14\xd9\xaa\x10\x1c\xf8\x03\x1c\xb4\x6f\x7b\x94\x9f\x5a\x73\x4f\x27\xcc\x35\xa9\xf2\xea\x3c\x39\xf1\x19\xae\x8c\xdf\x5b\x8e\x5b\x11\x69\x3a\x96\xe2\x3d\xd1\x04\xe6\x2d\xa1\x19\x43\x53\x61\x87\xa1\x41\xb7\x09\xfd\x2f\x5b\x71\xcd\xd7\xbf\x87\x23\x6f\x45\x98\x3b\x1a\x77\x95\xf6\xa9\xdc\x51\xdc\x0b\x2e\x29\xdb\x72\xd2\xd1\xb4\xb3\x07\xb5\x86\xd6\x53\xbb\xe7\xe5\x4a\x30\xf4\x98\xc8\xdc\xbf\x7e\xfa\xf0\xbb\xa7\xb4\xa4\x3c\xa3\xe9\xd6\xdd\x1f\x75\xd4\x04\x78\x69\x23\xc9\xed\x9e\xbe\x8e\x90\xa1\x89\x90\xe1\x18\x7c\x1f\x12\x4c\x29\x47\xd0\x39\x5a\x19\x88\x14\xfe\x7c\x7f\xff\x11\x56\x28\x97\xb0\x46\x58\x13\xae\x41\x0b\xa8\x14\x82\x6b\xd4\xea\x7e\xb0\xaa\x59\x1e\x75\x0c\xb4\x82\xd4\x98\x30\xd8\x95\x64\xb0\xce\x51\xe2\x29\xa6\x81\xeb\x00\x98\x18\x0d\x0f\x2e\xb4\x00\xc6\x9a\x99\x06\xb1\x7c\xc0\x58\xf7\xaa\x34\xc2\xda\x28\xad\x73\xa2\x0f\x47\xb2\xda\x89\x30\xc6\x71\x53\x62\xac\xa1\x6e\x6d\xa5\x28\xec\xf6\xea\xa0\xed\x00\x23\x8f\x45\x82\x21\x68\x59\x61\xd3\x41\x23\x2f\x11\x1c\xdd\xfe\x1c\x69\xc3\xd4\xd9\x71\x58\xd1\x42\x6a\xfa\xda\x06\xb5\x57\x4a\xfb\x7c\x8f\x29\xa9\x98\x76\x7b\xd7\x28\x2d\xca\x8f\x52\x94\x24\xb3\x17\x08\xb7\x55\x73\xea\xe7\xe0\x58\x7f\x07\x91\x5f\xb7\x73\x91\x6f\xff\xf3\xf8\x7f\x01\x00\x00\xff\xff\x0c\x40\xe1\x42\x4c\x16\x00\x00")

func tmplAuthenticateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplAuthenticateHtml,
		"tmpl/authenticate.html",
	)
}

func tmplAuthenticateHtml() (*asset, error) {
	bytes, err := tmplAuthenticateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/authenticate.html", size: 5708, mode: os.FileMode(420), modTime: time.Unix(1494290886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConsentHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xc1\x52\xc3\x20\x10\x86\xef\x79\x8a\x95\x93\x1e\x0c\x57\xa7\x43\xe2\x74\xaa\x5e\xdb\xb1\xf1\xe0\x91\x90\x6d\xc2\x48\x20\x86\x8d\xda\x61\x78\x77\x87\x26\x71\x2c\x97\x1f\xd8\xdd\xef\x87\x5d\x71\xf3\xb4\xdf\x55\xef\x87\x67\xe8\xa8\x37\x65\x26\x92\x80\x91\xb6\x2d\x18\x5a\x96\x2e\x50\x36\x65\x06\x00\x20\x7a\x24\x09\xaa\x93\xa3\x47\x2a\xd8\x5b\xf5\x72\xff\xc0\x96\x10\x69\x32\x58\x1e\x0c\x4a\x8f\xd0\xea\x2f\x84\xb3\x9b\x46\x50\xce\x7a\xb4\x24\xf8\x1c\xcf\x04\x9f\x71\xa2\x76\xcd\xb9\xcc\xc4\x30\x97\x6f\x2d\xc8\x61\x30\x5a\x49\xd2\xce\xc2\xad\x6e\x36\x10\x42\xbe\x9d\x1a\x8d\x56\x61\x8c\x77\x30\xe2\xe7\x84\x9e\xb0\x59\x99\x40\x0e\xa4\x52\xe8\x3d\x8c\xe8\xdd\x34\x2a\xf4\xe0\xec\xec\x5b\x63\x27\xcd\x29\x87\xaa\xc3\x2b\xf2\xb7\xb4\xe4\xd7\x32\x72\x9b\x4c\xf0\xa1\xcc\xc4\xc9\x8d\x3d\x48\x95\x52\x0a\xc6\x17\x83\x47\xd5\x49\x63\xd0\xb6\x58\x84\x90\xef\xd6\x43\x8c\x0c\x7a\xa4\xce\x35\x05\x3b\xec\x8f\xd5\xda\x81\xc9\xcc\x9b\xb4\x42\x18\xa5\x6d\x11\xf2\xd7\xf5\xd5\x47\xe5\x06\xf4\x31\xfe\xa5\x08\xa3\x4b\xa1\xed\x30\x11\xd0\x79\xc0\x82\xa9\x0e\xd5\x47\xed\x7e\x18\x58\xd9\x63\xc1\x42\xc8\x63\x64\xe5\x45\x04\x37\xfa\x3f\x1d\x6d\xb3\xa0\x04\x5f\x7d\xaf\x60\x7e\xaa\x7b\x4d\x69\x7c\x3c\xfd\x2d\xe9\xd2\x71\x7e\x99\xf3\x6f\x00\x00\x00\xff\xff\x02\xcf\x3d\xac\xf7\x01\x00\x00")

func tmplConsentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsentHtml,
		"tmpl/consent.html",
	)
}

func tmplConsentHtml() (*asset, error) {
	bytes, err := tmplConsentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consent.html", size: 503, mode: os.FileMode(420), modTime: time.Unix(1493660032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMyaccountHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xbd\xce\x83\x30\x0c\x00\xf7\x3c\x85\xbf\xec\x9f\xb2\x76\x30\x59\xfa\xb3\x55\x65\xa0\x43\x47\x37\x58\x80\x14\x1c\x04\xa6\x12\x6f\x5f\xa5\xc9\x64\xc9\x77\x67\x19\xff\x2e\x8f\x73\xf7\x6a\xaf\x30\xea\x1c\xbd\xc1\x3c\x20\x92\x0c\x8d\x65\xb1\x79\xc1\xd4\x7b\x03\x00\x80\x33\x2b\x41\x18\x69\xdd\x58\x1b\xfb\xec\x6e\xff\x27\x5b\x91\x4e\x1a\xd9\xb7\x91\x69\x63\x18\xa6\x0f\xc3\x91\xf6\x15\x42\x92\x8d\x45\xd1\x15\x6e\xd0\x95\x73\xf8\x4e\xfd\xe1\x0d\x2e\x25\xbf\x93\xd0\x50\x13\x0a\x21\xed\xa2\x06\xdd\x92\xfd\x2a\xba\xdf\x7b\xdf\x00\x00\x00\xff\xff\x26\x36\xa3\x6f\xae\x00\x00\x00")

func tmplMyaccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplMyaccountHtml,
		"tmpl/myaccount.html",
	)
}

func tmplMyaccountHtml() (*asset, error) {
	bytes, err := tmplMyaccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/myaccount.html", size: 174, mode: os.FileMode(420), modTime: time.Unix(1493845923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
	"tmpl/authenticate.html": tmplAuthenticateHtml,
	"tmpl/consent.html": tmplConsentHtml,
	"tmpl/myaccount.html": tmplMyaccountHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"authenticate.html": &bintree{tmplAuthenticateHtml, map[string]*bintree{}},
		"consent.html": &bintree{tmplConsentHtml, map[string]*bintree{}},
		"myaccount.html": &bintree{tmplMyaccountHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

