// Code generated by go-bindata.
// sources:
// postgres/1_init.sql
// tmpl/authenticate.html
// tmpl/consent.html
// tmpl/myaccount.html
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _postgres1_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x91\x4f\x4f\x02\x31\x10\xc5\xef\xfd\x14\x2f\x9c\x76\xa3\x24\x46\x8f\x9c\x4a\x3b\xe0\xc6\xda\x62\x69\x8d\x9c\x48\xc3\x36\xa6\x09\xff\xb2\xbb\xca\xd7\x37\x5d\x24\xa2\x06\xe6\xd6\xe9\xbc\xce\xfb\xbd\x0e\x87\xb8\xd9\xa4\xf7\x26\x74\x11\x7e\xcf\x98\xb0\xc4\x1d\xc1\xf1\xb1\x22\x7c\xb4\xb1\x69\x51\x30\x20\xd5\xc8\xe5\x7d\x25\xf1\xbf\xb4\x71\xd0\x5e\x29\xcc\x6c\xf5\xcc\xed\x02\x4f\xb4\xb8\x65\xc0\x36\x6c\x22\x00\x47\x6f\xee\x8a\x2a\x4f\xc6\x4d\x48\x6b\x40\x3c\x72\xcb\x85\x23\x8b\x57\x6e\x17\x95\x9e\x16\x0f\xf7\x77\xe5\xaf\xc9\xb0\xea\xd2\x67\xc4\xd8\x18\x75\xcd\x89\xa4\x09\xf7\xca\xc1\x59\x4f\x59\xe6\x75\xf5\xe2\x09\x45\xbf\xa8\x64\xe5\xe8\x0f\xea\x7a\xb7\x0a\xeb\x65\xaa\xe3\xb6\x4b\x5d\x8a\x47\xea\xcc\xbf\xcc\xe8\x3d\xf7\x25\xca\x89\xb1\x54\x4d\x75\x3e\xa2\x18\x7c\x6b\x06\x25\x2c\x4d\xc8\x92\x16\x34\x3f\x05\x99\xea\x12\x46\x43\x92\x22\x47\x10\x7c\x2e\xb8\xa4\xdc\xf1\x33\xc9\x7f\x3a\xf9\xd1\x7d\x68\xdb\xc3\xae\xa9\x8f\xe1\x9d\x56\xf7\xbe\xcf\xbf\x4c\xee\x0e\x5b\xc6\xa4\x35\xb3\x0b\x1c\xa3\xf3\xcb\xde\xc6\xe8\x2b\x00\x00\xff\xff\xba\xb3\xab\xb4\xf3\x01\x00\x00")

func postgres1_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_postgres1_initSql,
		"postgres/1_init.sql",
	)
}

func postgres1_initSql() (*asset, error) {
	bytes, err := postgres1_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "postgres/1_init.sql", size: 499, mode: os.FileMode(420), modTime: time.Unix(1494467608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplAuthenticateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x59\xff\x6e\xdb\x38\xf2\xff\x3f\x4f\x31\xcb\x66\x11\x7b\x11\x4b\x72\xdc\x74\x0b\xc5\x4e\xbf\xfd\xb6\x1b\xdc\x1d\x0e\xdb\x62\x93\x3b\xdc\x62\xb1\x7f\xd0\xd2\x48\x62\x43\x93\x5a\x92\x4a\xec\xe6\x0c\xf4\x41\x6e\x5f\xae\x4f\x72\x20\x25\xd9\x96\x2c\xb9\xe9\x8f\x93\x5a\x3b\xe2\x8f\x99\xe1\x67\x3e\x33\x1c\xca\xd3\xef\x5e\xbf\x79\x75\xf3\xeb\xdb\x9f\x20\x33\x0b\x7e\x79\x34\xb5\x5f\xc0\xa9\x48\x67\x04\x05\xb1\x0d\x48\xe3\xcb\x23\x00\x80\xe9\x02\x0d\x85\x28\xa3\x4a\xa3\x99\x91\x7f\xdc\x5c\x8d\x9e\x93\xdd\x2e\x41\x17\x38\xfb\xf8\xe1\x3f\xa9\x54\x8c\x73\xea\x45\x5a\x25\xde\x8d\xbc\x45\xf1\xf1\xc3\x9f\x10\x49\x61\x50\x18\x3b\xe0\xe1\xc1\xf5\xb9\xae\xf5\xfa\xe3\x87\x3f\x2b\x29\x86\x19\x8e\x97\x7f\x97\x29\x30\x01\xff\x86\x6b\x53\xc4\x4c\x16\x9a\xaf\xa6\x7e\xd9\x55\x0e\xd3\x66\x55\xff\x6d\xaf\xff\x63\x8b\x5c\x2a\x03\x85\xe2\x83\xcc\x98\x5c\x87\xbe\x9f\x48\x61\xb4\x97\x4a\x99\x72\xa4\x39\xd3\x5e\x24\x17\x7e\xa4\xf5\x8b\x84\x2e\x18\x5f\xcd\x7e\x91\x73\x69\x64\x38\x09\x82\xe1\xc5\xd1\x46\x92\xc7\x65\xca\xc4\x28\xa7\x29\xc2\xc3\xa6\xd5\x5e\xf7\x2c\x36\x59\x08\x93\x67\x41\xbe\xbc\x68\xf4\xe4\x34\x8e\x99\x48\x43\x78\xfe\x3d\x04\x10\x34\x3b\x17\x54\xa5\x4c\x84\x40\x0b\x23\xb7\x3d\xeb\x1d\x8d\x89\x54\x8b\x96\xae\x5c\x6a\x66\x98\x14\x21\x28\xe4\xd4\xb0\x3b\x6c\x0a\x7d\x3f\x62\x22\xc6\x65\x08\xe3\x66\xfb\x9c\x46\xb7\xa9\x92\x85\x88\x43\x78\x72\xe5\xae\xb6\x35\xcb\x51\xff\x42\x6a\x5b\x03\x67\x2d\x8c\x83\xfe\xa5\x3e\x3d\x6f\x77\x19\x5c\x9a\x11\xe5\x2c\x15\x21\x44\x28\x0c\xaa\x96\x6d\x72\x39\xd2\x19\x8d\xe5\xbd\x55\x10\xc0\x59\x90\x2f\x21\x00\x95\xce\xe9\x20\x38\x85\xea\x9f\x77\x36\x3c\x85\x00\xce\xf3\xa5\xfb\xdf\xd1\xff\x74\xd8\x09\xa3\x43\xd1\x43\xa5\xa4\x6a\x81\x19\x49\x2e\x55\x08\x4f\x92\x24\x08\x82\x00\xbe\x2b\xb9\x42\x85\x39\xe0\x0e\x26\xf2\xc2\xb4\xe4\x58\x42\x8d\x4a\xf2\x84\x40\x4a\xfa\x90\x53\xd0\x54\xe8\x91\x46\xc5\x92\xe6\x7a\x65\x61\x38\x13\x18\xb6\x09\xd1\xf0\x51\x72\x66\xef\x8b\x2e\xa2\x8d\x83\xe0\xfb\x36\x82\x2a\x46\xb5\x27\x70\xeb\xb5\x00\xc6\x7b\x6e\xd9\x78\x6c\xbf\xcb\x79\x84\xbd\x77\xbd\xa5\xec\xd1\x5c\xb6\xc6\xb8\x45\x6b\xf6\x1e\x43\x18\x3f\xdd\x15\xb0\x07\xd9\xbc\x30\x46\x8a\xaf\xc3\xcc\x71\xc8\x28\x2a\xb4\x15\x19\x42\x91\xe7\xa8\x22\xaa\xf1\x0b\xa0\x7d\xfa\xea\xe5\xd5\x79\xf0\x75\xd0\x1e\x00\xaf\x66\x55\x57\x94\xf5\x82\x66\xaf\xd1\x3d\xce\x6f\x59\xb5\xcc\x2a\xca\x29\xe7\x10\x78\x13\xc0\xbd\xa5\x3e\x6e\x54\x54\x28\x6d\xad\xc9\x25\x6b\x06\x5e\x8f\x97\xc2\x4c\xde\xa1\x3a\x6d\xb6\xd1\xc8\x26\x9a\x56\x63\x22\xa3\x42\xb7\x9c\xda\x84\x79\xf2\x32\x78\xfa\xe3\x01\x8d\xde\x02\xb5\xde\x4f\xa7\x35\x6b\xc7\x65\x98\x07\xdd\xe8\xce\x27\xf6\xee\x47\xf7\xec\x20\x25\x37\xaa\x69\x4f\x4a\xe8\xe2\x88\xe3\x60\x8c\x91\x54\xb4\x84\x5d\x48\x81\x87\x94\x28\x4c\x99\x36\xa8\x46\x1d\x89\x3c\x66\x3a\xe7\x74\x75\x48\x88\xdd\x14\x29\x13\xd8\x4e\x5b\x5f\xba\x07\xec\xa6\xf8\xfd\x04\xde\x4c\xf1\x9f\xb0\x28\x9c\x63\x22\x95\xa5\xc4\xb6\x89\x26\x66\xcf\xd4\x6a\x5f\x0f\x81\x90\x8b\xee\xe5\xcf\xb9\x8c\x6e\x5b\x2e\xe6\x48\x95\x4d\x3c\x26\xfb\x14\x30\x1e\x13\x89\xec\xe1\xcf\xb9\xdd\x46\x9a\x6b\x81\x4f\xec\x46\x87\x94\x64\xe3\x1e\x3d\x9f\xc8\xae\x41\x2f\x47\x27\xcf\xda\x93\x5c\xe7\x3d\xb2\x34\x33\xce\x47\xdd\xd4\x1f\x53\x7b\x3f\xce\x6a\x9d\xd3\x76\xe6\xdd\x50\x3c\xb6\xf7\x17\x44\x50\xa7\x8e\xbe\x40\x0a\xdc\xf5\xc5\x81\xd4\xa9\xcb\x4b\xfa\xb4\xfd\x74\x35\xf9\xff\xc9\xcb\x4e\x51\x73\x19\xaf\x0e\xa5\xab\x1f\x9f\xcd\x9f\x9f\x9f\x5d\x80\xff\x03\x24\x94\x73\xdb\x67\x4b\x07\x90\x3c\x86\xb9\x92\xf7\x1a\x95\x86\x1f\xfc\x5e\x01\x75\xf6\xb6\xfb\x0f\x55\xa3\x54\xd1\x98\xa1\x30\x03\x65\xbd\x79\x5a\xcb\x3f\x85\x27\xcf\x5f\xbf\x3a\x7b\x76\x35\xec\xdf\xa0\x46\x0b\xf9\xfe\x5b\x88\x91\xdf\x40\x48\x5b\x82\x91\xc0\x31\xf9\xb4\x8c\xcf\x2d\x89\xee\x50\x25\xdc\x16\x80\x19\x8b\x63\x14\xdd\x1b\x63\xc9\xce\x85\x94\x26\x73\xa1\x45\x85\x61\x94\x33\xaa\xb1\x45\x63\x87\xa0\xd4\xcb\xbd\x19\xa9\xa2\x2b\x1d\x51\xde\x60\x9b\xfd\x9c\xfa\xd5\xc1\x61\xea\x97\x87\x9a\xa9\xe5\xcb\xe5\xd1\xd1\x34\x66\x77\xc0\xe2\x19\xa1\x79\x4e\x20\xe2\x54\xeb\x19\xd9\x1e\x05\xea\x33\x8e\x1d\x55\x75\xda\x64\x4f\xb6\x27\x90\xe9\x77\xa3\xd1\x34\x9b\x80\x4b\x39\x33\x62\xd1\x23\xd5\x31\x66\xea\x67\x93\xcb\xd1\x68\x67\x6c\x59\x62\xc6\x33\x52\x6f\x1d\x1b\x95\x8d\xbd\x84\x80\xdd\x92\xa5\x98\x11\x5f\xb3\x54\x14\x39\x81\x05\x9a\x4c\xc6\x33\xf2\xf6\xcd\xf5\xcd\x8e\x76\x27\x35\x1b\x37\xb5\xbf\x52\x48\x0d\x82\x8d\xda\x28\x92\x85\x30\x53\x3f\x1b\xb7\xe6\xe4\x8d\x29\xb5\x15\xae\x8a\x26\x97\x53\x3f\x6f\x0d\x2f\xcb\x62\x77\xc8\x23\xf6\x93\x80\x59\xe5\x38\x23\x36\xd4\x09\xe4\x9c\x46\x98\x49\x1e\xa3\xaa\xba\xfd\x03\xf3\x73\xaa\xf5\xbd\x54\x71\x2d\x63\xfb\xdc\x90\xb3\x69\x3e\x24\x0b\x17\x94\xf1\x5a\x50\xf5\xd0\x90\xe2\xda\x80\xc6\xb1\x42\xad\xdb\xa2\x1e\x1e\xc0\x1d\x46\xaf\x18\xf2\x18\xd6\xeb\xa6\x9e\xaa\xae\x2d\x65\xeb\x62\xbe\x60\x86\x5c\x46\x0e\xdb\xa9\x5f\x76\xee\x81\x5a\xe1\x58\x95\x1f\xe4\xf2\x25\x57\x48\xe3\x15\xd4\xee\xc5\xf8\x05\x4c\x29\x64\x0a\x93\x19\x79\x42\x2e\xaf\x59\x2a\xe0\xaf\x62\xea\xd3\x26\xe8\x53\xdf\xf2\xa0\x8b\x39\x96\x10\x4c\xb4\xa8\xda\x22\x8d\x6b\x7c\x11\x65\x94\x73\x14\x29\xce\xdc\x3a\xeb\x27\x58\xaf\x3f\x8f\x4e\xce\x46\xc7\xe6\x6f\x48\xa2\xc7\x39\xee\x7f\xc9\xa3\x2f\x70\xbe\xc3\xf5\xd1\xbe\xff\x59\x9a\x5e\xbf\x77\x84\xe8\x01\x06\x4c\xfd\x98\xdd\xd9\xdc\xe5\xbe\x8e\xa6\x3a\x52\x2c\x37\xa0\x55\x34\x23\xf5\x5b\x0f\xfa\x8e\x2e\xdb\x2f\x3d\x6c\x9b\xcf\xd9\x5c\xfb\xef\xfe\x28\x50\xad\xfc\x89\x77\xe6\x8d\xab\x07\x6f\xc1\x84\xf7\x4e\x5b\x47\x95\xf2\xb6\x92\x4b\xad\xc7\x83\x58\x46\xc5\x02\x85\x19\x7a\x8e\xc5\x83\xa4\x10\x8e\x62\x30\x18\xc2\xc3\x76\xeb\x3d\x1e\x9c\x6c\x0b\xee\x93\xa1\x17\x71\x16\xdd\xb6\x06\xef\x62\x75\x3c\x38\xb1\x6b\x3b\x19\x7a\x54\xb0\x05\x35\x38\x78\xc8\xaa\xa2\x88\x18\x99\xa6\x1c\xc9\x29\xc8\x9c\x46\xcc\xac\xb6\x4d\xeb\x53\x20\x9a\xcb\x7b\x32\xdc\xe6\xf6\xdd\x17\x38\x77\x54\x6d\xe0\x86\x19\x1c\x0f\xc8\x93\x4d\x96\xdd\x4e\xa9\x9b\x1a\x06\x79\xa5\x83\x77\x4c\xc6\x3b\xbb\xec\x96\xdd\xf6\x72\x1d\x5e\xae\xdc\xf7\x6b\x4c\x68\xc1\xcd\x60\xb8\x37\xec\xd8\xb3\xd8\x0f\xf6\xe7\xdb\xab\x0c\xbe\x10\x4e\x6c\xf4\x9d\x9c\x76\x8e\x29\x14\x0f\xe1\xa4\x4a\xff\x3d\x63\x72\x25\x23\xd4\xfa\x35\x35\x34\xb4\x45\x8d\xc6\xee\x71\x55\x95\x7e\xb3\xca\xf1\xe0\xb8\xd8\x09\x12\x78\x0f\x57\x52\x2d\xac\xd8\x41\x0d\xd7\x6f\xc1\xef\xc3\xd3\x23\xdf\x7f\xe4\xb4\x87\x9e\xa1\xf6\xb2\xc1\x1b\x6e\xfc\xe0\x25\x4c\xc4\x03\xe2\xe2\xfa\x37\x17\xd7\x27\xf6\xf3\xe4\x77\x32\xf4\xee\x28\x1f\xf4\x6a\x75\x00\x54\xa1\x7d\x50\x5c\x3d\xc8\x8a\x3c\x24\xcc\x25\x9c\x83\x92\xdc\x88\x43\x62\xd6\xc3\x6e\x60\x6d\xc9\x81\x4a\x87\x1d\x7c\xaa\x2f\xf2\xaf\xd1\xab\xeb\x5f\xae\x46\xee\xbd\x28\x09\x2d\x7d\x17\x68\x68\xa5\x79\xff\xad\xaa\x03\x88\x1a\xa3\x06\xa4\x72\x2f\xd9\x67\x21\x6c\xea\x9f\xa6\x95\x5e\x2c\x05\xee\xb0\x5d\xa1\xce\xa5\xd0\xd8\x45\x78\xd8\x09\x9a\x0a\x93\xf2\x65\x5b\xe5\x20\xd2\xa3\xd7\xc6\x5f\xb5\x57\x0d\x0f\x61\xe9\x84\x3c\x06\xf4\x92\x0e\x7d\xca\xbe\x51\x46\xd9\xc1\x28\xa1\x8c\xef\x60\xb4\xcc\xd4\x29\x68\x43\x4d\xa1\xfb\x60\x2a\x33\x50\x09\xa5\xcd\x40\x5e\x4e\x95\xc6\xbf\x5d\xbf\xf9\xd9\xce\xf6\xea\xae\x1b\x5c\x9a\xee\x65\x44\x52\x68\xc9\xd1\xe3\x32\xdd\xfa\xe4\xb3\x3c\x62\xeb\xb1\xcd\xd4\xb2\xb5\x6b\x71\x47\xcd\xc7\x8b\xa3\x1d\x42\x1f\x0f\x5c\x89\x5b\xc1\x5f\x2b\xaa\x3d\xc0\x62\x87\x6e\x2b\x00\x7c\x1f\xae\x73\x8c\x58\xb2\x82\x6a\x8c\xc5\x4c\x15\x1c\x75\x6b\xa4\x6b\xb3\x81\xb0\x1f\x41\xbe\x0f\x37\x19\xc2\x2d\xae\x5c\x8e\x00\xbb\xfd\x66\xe8\xce\x23\xa0\x59\x8c\xc0\xb4\x6b\x70\x9d\x96\xfa\x6c\x5e\x18\xec\x16\x24\x13\xbb\xb7\x96\xd5\x42\x62\x37\x78\x0f\xfe\xd9\x32\x0c\xa8\x42\x88\x31\x61\x02\xe3\x1e\x21\xa5\x01\xee\x54\xe5\x2c\xe8\x18\x56\x66\x33\xa2\xf0\x8f\x82\x29\x8c\x49\x57\x6a\xa8\x32\x4b\x5f\x52\xac\xe7\x86\x60\x54\x81\x7d\xb9\x65\x07\x62\x93\x51\x53\x0a\x05\x9d\xc9\xc2\x1e\x60\xb1\xc6\xbd\x73\x2d\xd5\xfc\xf9\xca\xad\x67\x5e\x30\x6e\x46\x4c\x40\x5d\x77\x59\x38\x7a\x66\x55\xa6\x5b\xc3\x3a\x46\xac\xbb\x8c\xdd\x26\xe5\xaf\x5b\xf0\x82\x09\x5b\xaf\x9a\x2c\x84\xf3\x2e\xdd\xad\xb6\x3d\x5b\xba\x39\x59\xfe\x4e\x50\x55\x2b\x6d\x72\xd6\xcd\xdd\xa6\x57\xae\x7e\xcb\x91\x6a\x04\xf7\x6a\x09\x56\xb2\x50\xae\xc3\xeb\xf4\xfc\xe7\x60\x51\x0b\xce\x95\xbc\xb3\x6c\xa7\x9b\xd9\xdd\xb2\x5b\x18\x91\x5f\xad\x29\xf5\x14\x58\x14\xda\x58\x5a\x50\x03\x56\xac\x81\x73\xf7\xeb\x1d\x8d\x0c\x2a\x0d\x5c\x8a\xd4\x23\x8f\xf5\x68\x45\x82\xe6\xca\x69\x89\x2a\x34\x0e\x58\x7b\x32\xf7\xe4\x95\x95\xd6\x5f\xa8\x88\x39\xaa\x10\xb6\xf9\xd5\xe6\x9c\x61\x27\x4c\xc7\x65\x9f\xab\xa8\xae\xcb\x42\x6d\x78\xd1\xd6\xb3\xf3\xbc\xae\xde\x55\xac\x87\x47\xbb\xa5\xad\x5f\x9e\xf8\xa7\xbe\xfb\xb5\xf3\xbf\x01\x00\x00\xff\xff\xc3\xac\x0a\x94\xfd\x1c\x00\x00")

func tmplAuthenticateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplAuthenticateHtml,
		"tmpl/authenticate.html",
	)
}

func tmplAuthenticateHtml() (*asset, error) {
	bytes, err := tmplAuthenticateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/authenticate.html", size: 7421, mode: os.FileMode(420), modTime: time.Unix(1494455806, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConsentHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xc1\x52\xc3\x20\x10\x86\xef\x79\x8a\x95\x93\x1e\x0c\x57\xa7\x43\xe2\x74\xaa\x5e\xdb\xb1\xf1\xe0\x91\x90\x6d\xc2\x48\x20\x86\x8d\xda\x61\x78\x77\x87\x26\x71\x2c\x97\x1f\xd8\xdd\xef\x87\x5d\x71\xf3\xb4\xdf\x55\xef\x87\x67\xe8\xa8\x37\x65\x26\x92\x80\x91\xb6\x2d\x18\x5a\x96\x2e\x50\x36\x65\x06\x00\x20\x7a\x24\x09\xaa\x93\xa3\x47\x2a\xd8\x5b\xf5\x72\xff\xc0\x96\x10\x69\x32\x58\x1e\x0c\x4a\x8f\xd0\xea\x2f\x84\xb3\x9b\x46\x50\xce\x7a\xb4\x24\xf8\x1c\xcf\x04\x9f\x71\xa2\x76\xcd\xb9\xcc\xc4\x30\x97\x6f\x2d\xc8\x61\x30\x5a\x49\xd2\xce\xc2\xad\x6e\x36\x10\x42\xbe\x9d\x1a\x8d\x56\x61\x8c\x77\x30\xe2\xe7\x84\x9e\xb0\x59\x99\x40\x0e\xa4\x52\xe8\x3d\x8c\xe8\xdd\x34\x2a\xf4\xe0\xec\xec\x5b\x63\x27\xcd\x29\x87\xaa\xc3\x2b\xf2\xb7\xb4\xe4\xd7\x32\x72\x9b\x4c\xf0\xa1\xcc\xc4\xc9\x8d\x3d\x48\x95\x52\x0a\xc6\x17\x83\x47\xd5\x49\x63\xd0\xb6\x58\x84\x90\xef\xd6\x43\x8c\x0c\x7a\xa4\xce\x35\x05\x3b\xec\x8f\xd5\xda\x81\xc9\xcc\x9b\xb4\x42\x18\xa5\x6d\x11\xf2\xd7\xf5\xd5\x47\xe5\x06\xf4\x31\xfe\xa5\x08\xa3\x4b\xa1\xed\x30\x11\xd0\x79\xc0\x82\xa9\x0e\xd5\x47\xed\x7e\x18\x58\xd9\x63\xc1\x42\xc8\x63\x64\xe5\x45\x04\x37\xfa\x3f\x1d\x6d\xb3\xa0\x04\x5f\x7d\xaf\x60\x7e\xaa\x7b\x4d\x69\x7c\x3c\xfd\x2d\xe9\xd2\x71\x7e\x99\xf3\x6f\x00\x00\x00\xff\xff\x02\xcf\x3d\xac\xf7\x01\x00\x00")

func tmplConsentHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConsentHtml,
		"tmpl/consent.html",
	)
}

func tmplConsentHtml() (*asset, error) {
	bytes, err := tmplConsentHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/consent.html", size: 503, mode: os.FileMode(420), modTime: time.Unix(1493660032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMyaccountHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\x8e\xbd\xce\x83\x30\x0c\x00\xf7\x3c\x85\xbf\xec\x9f\xb2\x76\x30\x59\xfa\xb3\x55\x65\xa0\x43\x47\x37\x58\x80\x14\x1c\x04\xa6\x12\x6f\x5f\xa5\xc9\x64\xc9\x77\x67\x19\xff\x2e\x8f\x73\xf7\x6a\xaf\x30\xea\x1c\xbd\xc1\x3c\x20\x92\x0c\x8d\x65\xb1\x79\xc1\xd4\x7b\x03\x00\x80\x33\x2b\x41\x18\x69\xdd\x58\x1b\xfb\xec\x6e\xff\x27\x5b\x91\x4e\x1a\xd9\xb7\x91\x69\x63\x18\xa6\x0f\xc3\x91\xf6\x15\x42\x92\x8d\x45\xd1\x15\x6e\xd0\x95\x73\xf8\x4e\xfd\xe1\x0d\x2e\x25\xbf\x93\xd0\x50\x13\x0a\x21\xed\xa2\x06\xdd\x92\xfd\x2a\xba\xdf\x7b\xdf\x00\x00\x00\xff\xff\x26\x36\xa3\x6f\xae\x00\x00\x00")

func tmplMyaccountHtmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplMyaccountHtml,
		"tmpl/myaccount.html",
	)
}

func tmplMyaccountHtml() (*asset, error) {
	bytes, err := tmplMyaccountHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/myaccount.html", size: 174, mode: os.FileMode(420), modTime: time.Unix(1493845923, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"postgres/1_init.sql": postgres1_initSql,
	"tmpl/authenticate.html": tmplAuthenticateHtml,
	"tmpl/consent.html": tmplConsentHtml,
	"tmpl/myaccount.html": tmplMyaccountHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"postgres": &bintree{nil, map[string]*bintree{
		"1_init.sql": &bintree{postgres1_initSql, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"authenticate.html": &bintree{tmplAuthenticateHtml, map[string]*bintree{}},
		"consent.html": &bintree{tmplConsentHtml, map[string]*bintree{}},
		"myaccount.html": &bintree{tmplMyaccountHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

