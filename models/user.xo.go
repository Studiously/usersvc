// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/google/uuid"
)

// User represents a row from 'public.users'.
type User struct {
	ID     uuid.UUID `json:"id"`     // id
	Name   string    `json:"name"`   // name
	Email  string    `json:"email"`  // email
	Active bool      `json:"active"` // active

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.users (` +
		`id, name, email, active` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Name, u.Email, u.Active)
	_, err = db.Exec(sqlstr, u.ID, u.Name, u.Email, u.Active)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`name, email, active` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, u.Name, u.Email, u.Active, u.ID)
	_, err = db.Exec(sqlstr, u.Name, u.Email, u.Active, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, name, email, active` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, email, active` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.email, EXCLUDED.active` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Name, u.Email, u.Active)
	_, err = db.Exec(sqlstr, u.ID, u.Name, u.Email, u.Active)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, email, active ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.ID, &u.Name, &u.Email, &u.Active)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(db XODB, id uuid.UUID) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, email, active ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Name, &u.Email, &u.Active)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
