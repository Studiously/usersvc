// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"

	"github.com/google/uuid"
)

// LocalIdentity represents a row from 'public.local_identities'.
type LocalIdentity struct {
	UserID   uuid.UUID `json:"user_id"`  // user_id
	Password string    `json:"password"` // password

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LocalIdentity exists in the database.
func (li *LocalIdentity) Exists() bool {
	return li._exists
}

// Deleted provides information if the LocalIdentity has been deleted from the database.
func (li *LocalIdentity) Deleted() bool {
	return li._deleted
}

// Insert inserts the LocalIdentity to the database.
func (li *LocalIdentity) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if li._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.local_identities (` +
		`user_id, password` +
		`) VALUES (` +
		`$1, $2` +
		`)`

	// run query
	XOLog(sqlstr, li.UserID, li.Password)
	err = db.QueryRow(sqlstr, li.UserID, li.Password).Scan(&li.UserID)
	if err != nil {
		return err
	}

	// set existence
	li._exists = true

	return nil
}

// Update updates the LocalIdentity in the database.
func (li *LocalIdentity) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !li._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if li._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.local_identities SET (` +
		`password` +
		`) = ( ` +
		`$1` +
		`) WHERE user_id = $2`

	// run query
	XOLog(sqlstr, li.Password, li.UserID)
	_, err = db.Exec(sqlstr, li.Password, li.UserID)
	return err
}

// Save saves the LocalIdentity to the database.
func (li *LocalIdentity) Save(db XODB) error {
	if li.Exists() {
		return li.Update(db)
	}

	return li.Insert(db)
}

// Upsert performs an upsert for LocalIdentity.
//
// NOTE: PostgreSQL 9.5+ only
func (li *LocalIdentity) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if li._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.local_identities (` +
		`user_id, password` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (user_id) DO UPDATE SET (` +
		`user_id, password` +
		`) = (` +
		`EXCLUDED.user_id, EXCLUDED.password` +
		`)`

	// run query
	XOLog(sqlstr, li.UserID, li.Password)
	_, err = db.Exec(sqlstr, li.UserID, li.Password)
	if err != nil {
		return err
	}

	// set existence
	li._exists = true

	return nil
}

// Delete deletes the LocalIdentity from the database.
func (li *LocalIdentity) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !li._exists {
		return nil
	}

	// if deleted, bail
	if li._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.local_identities WHERE user_id = $1`

	// run query
	XOLog(sqlstr, li.UserID)
	_, err = db.Exec(sqlstr, li.UserID)
	if err != nil {
		return err
	}

	// set deleted
	li._deleted = true

	return nil
}

// User returns the User associated with the LocalIdentity's UserID (user_id).
//
// Generated from foreign key 'local_identities_user_id_fkey'.
func (li *LocalIdentity) User(db XODB) (*User, error) {
	return UserByID(db, li.UserID)
}

// LocalIdentityByUserID retrieves a row from 'public.local_identities' as a LocalIdentity.
//
// Generated from index 'local_identities_pkey'.
func LocalIdentityByUserID(db XODB, userID uuid.UUID) (*LocalIdentity, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, password ` +
		`FROM public.local_identities ` +
		`WHERE user_id = $1`

	// run query
	XOLog(sqlstr, userID)
	li := LocalIdentity{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID).Scan(&li.UserID, &li.Password)
	if err != nil {
		return nil, err
	}

	return &li, nil
}
